#include <WiFi.h>
#include <Wire.h> //I2C connection
#include <ESP32Servo.h>
#include "AdafruitIO_WiFi.h"

//Conexi√≥n con Adafruit
#define IO_USERNAME  "anderson2006"
#define IO_KEY       "aio_klaN93JS054ea4STkHuszTLntg5v"

#define WIFI_SSID      "TCL 20E"
#define WIFI_PASS      "CrisBerganza"

AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);

// Replace with your network credentials
const char *ssid = "TCL 20E";
const char *password = "CrisBerganza";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;
Servo servo;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

int state = 0; // 0 off, 1 on
int state2 = 0;
int state4 = 0; // 0 off, 1 on
int state5 = 0;

int led1=13;//pin led
int led2=33; //pin buzzer
int led3=19;//pin
int pinServo=21;
int trig = 5;     //Transmisor
int eco = 18;      //Receptor
int duracion;     //Variable para duracion del pulso
int distancia;    //Variable para hallar la distancia

int IN1 = 2;
int IN2 = 4;
int cambio=false;
AdafruitIO_Feed *ultra1 = io.feed("ultra1");


void setup() {
   pinMode(led1,OUTPUT);
   pinMode(led2,OUTPUT);
   pinMode(led3,OUTPUT);
  //  pinMode(led4,OUTPUT);
   Wire.begin(21, 22);
   servo.attach(pinServo, 500, 2500);
   Serial.begin(115200);

     // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid,password );
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
  Serial.print("Connecting to Adafruit IO");
  io.connect();
  
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  
  Serial.println();
  Serial.println(io.statusText());
  
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  // ultrasonico 
  pinMode(trig, OUTPUT);
  pinMode(eco, INPUT);
}

void loop() {
   WiFiClient client = server.available(); // Listen for incoming clients

  if (client)
  { // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client."); // print a message out in the serial port
    String currentLine = "";       // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime)
    { // loop while the client's connected
      currentTime = millis();
      if (client.available())
      {                         // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c);        // print it out the serial monitor
        header += c;
        if (c == '\n')
        { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0)
          {
    // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
 // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // turns the GPIOs on and off
            if (header.indexOf("GET /led1/on") >= 0)
            {
              state2 = 1;
              Serial.println("Led1 ON");
              LED1();
                       
            }
            else if (header.indexOf("GET /led1/off") >= 0)
            {
              state2 = 0;
              Serial.println("Led1 OFF");
              LED_Apagada1();
                       }

            if (header.indexOf("GET /led2/on") >= 0)
            {
              state4 = 1;
              Serial.println("Led2 ON");
              LED2();
                       
            }
            else if (header.indexOf("GET /led2/off") >= 0)
            {
              state4 = 0;
              Serial.println("Led2 OFF");
              LED_Apagada2();
                       }

            if (header.indexOf("GET /led3/on") >= 0)
            {
              state5 = 1;
              Serial.println("Led3 ON");
              LED3();
                       
            }
            else if (header.indexOf("GET /led3/off") >= 0)
            {
              state5 = 0;
              Serial.println("Led3 OFF");
              LED_Apagada3();
                       }
            // if (header.indexOf("GET /led4/on") >= 0)
            // {
            //   state6 = 1;
            //   Serial.println("Led4 ON");
            //   LED4();
                       
            // }
            // else if (header.indexOf("GET /led4/off") >= 0)
            // {
            //   state6 = 0;
            //   Serial.println("Led4 OFF");
            //   LED_Apagada4();
            //            }
            if (header.indexOf("GET /led/on") >= 0)
            {
              state = 1;
              Serial.println("Led ON");
              LED();
                       
            }
            else if (header.indexOf("GET /led/off") >= 0)
            {
              state = 0;
              Serial.println("Led OFF");
              LED_Apagada();
                       }

            //Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
           

            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button5 { background-color: #3FFCB8; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button6 {background-color: #3FFCFB;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button7 { background-color: #3F57FC; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button8 {background-color: #E71BD5;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button9 { background-color: #ED7F12; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button10 {background-color: #8AF706;}</style></head>");

            // client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            // client.println(".button11 { background-color: #06D2F7; border: none; color: white; padding: 16px 40px;");
            // client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            // client.println(".button12 {background-color: #D206F7;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button13 { background-color: #06D2F7; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button14 {background-color: #D206F7;}</style></head>");
        
            // Web Page Heading
            client.println("<body><h1>XD</h1>");

            // Display current state, and ON/OFF buttons for GPIO 26
            // If the output26State is off, it displays the ON button
            if (state2 == 1)
            {
              client.println("<p>Led1 Encendida</p>");
              client.println("<p><a href=\"/led1/off\"><button class=\"button5 button6\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led1 Apagada</p>");
              client.println("<p><a href=\"/led1/on\"><button class=\"button5\">ON</button></a></p>");
            
           
            
            }
             if (state == 1)
            {
              client.println("<p>Puerta abierta</p>");
              client.println("<p><a href=\"/led/off\"><button class=\"button13 button14\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Puesrta cerrada</p>");
              client.println("<p><a href=\"/led/on\"><button class=\"button13\">ON</button></a></p>");
            
           
            
            }
            if (state4 == 1)
            {
              client.println("<p>Led2 Encendida</p>");
              client.println("<p><a href=\"/led2/off\"><button class=\"button7 button8\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led2 Apagada</p>");
              client.println("<p><a href=\"/led2/on\"><button class=\"button7\">ON</button></a></p>");
            
           
            
            }
            if (state5 == 1)
            {
              client.println("<p>Led3 Encendida</p>");
              client.println("<p><a href=\"/led3/off\"><button class=\"button9 button10\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led3 Apagada</p>");
              client.println("<p><a href=\"/led3/on\"><button class=\"button9\">ON</button></a></p>");
            
           
            
            }
//             io.run();
//   //envio_ultra1();
//   digitalWrite(trig, HIGH);
//   delayMicroseconds(10);
//   digitalWrite(trig, LOW);

//   duracion = pulseIn(eco, HIGH);  // Recibe el pulso
//   distancia = duracion / 58.2;    // Calculo para hallar la distancia en cm
//   Serial.print(distancia);
//   Serial.println(" cm");
//   if(distancia<=20 && distancia>=10){
//     for(int i=0;i<=20;i++){
//       abrir();
//       Serial.print(i);
//     }
//     parar();
//     delay(1500);
//     for(int j=0;j<=20;j++){
//       cerrar();
//       Serial.print(j);
//     }
    

//   }
// parar();
            //  (state6 == 1)
            // {
            //   client.println("<p>Led4 encendido</p>");
            //   client.println("<p><a href=\"/led4/off\"><button class=\"button11 button12\">OFF</button></a></p>");
            //   if
              
            
            // }
            // else
            // {
            //   client.println("<p>Buzzer Apagado</p>");
            //   client.println("<p><a href=\"/led4/on\"><button class=\"button11\">ON</button></a></p>");
            
           
            
            // }

            client.println("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          }
          else
          { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        }
        else if (c != '\r')
        {                   // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
           io.run();
  //envio_ultra1();
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);

  duracion = pulseIn(eco, HIGH);  // Recibe el pulso
  distancia = duracion / 58.2;    // Calculo para hallar la distancia en cm
  Serial.print(distancia);
  Serial.println(" cm");
  if(distancia<=20 && distancia>=10){
    for(int i=0;i<=7;i++){
      abrir();
      Serial.print(i);
    }
    parar();
    delay(1500);
    for(int j=0;j<=7;j++){
      cerrar();
      Serial.print(j);
    }
    

  }
parar();
}

void LED1(){
 digitalWrite(led1,HIGH);
}

void LED_Apagada1(){
  digitalWrite(led1,LOW);
}
void LED2(){
 digitalWrite(led2,HIGH);
}

void LED_Apagada2(){
  digitalWrite(led2,LOW);
}
void LED3(){
 digitalWrite(led3,HIGH);
}

void LED_Apagada3(){
  digitalWrite(led3,LOW);
}
void LED(){
    servo.write(0);
}

void LED_Apagada(){
  servo.write(90);
}
void abrir() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  delay(50); // Retardo para reducir la velocidad
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  delay(100);


}

void cerrar() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  delay(50); // Retardo para reducir la velocidad
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  delay(100);
}

void parar() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
}
