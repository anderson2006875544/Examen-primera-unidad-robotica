#include <WiFi.h>
#include <Wire.h> //I2C connection
#include <ESP32Servo.h>
#include <Arduino.h>
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include "DHT.h"

// Replace with your network credentials
const char *ssid = "ITSWEB_3_45";
const char *password = "FAMILIAZACARIAS2023";
#define WIFI_SSID "ITSWEB_3_45"
#define WIFI_PASSWORD "FAMILIAZACARIAS2023"
#define ADAFRUIT_USER "anderson2006"
#define ADAFRUIT_KEY "aio_klaN93JS054ea4STkHuszTLntg5v"
#define ADAFRUIT_SERVER "io.adafruit.com"
#define ADAFRUIT_PORT 1883
char ADAFRUIT_ID[30];
// Publicar
#define ADAFRUIT_FEED_HUM1  ADAFRUIT_USER "/feeds/hum1"
#define ADAFRUIT_FEED_TEM1  ADAFRUIT_USER "/feeds/temperatura1"

#define ADAFRUIT_FEED_HUM2  ADAFRUIT_USER "/feeds/hum2"
#define ADAFRUIT_FEED_TEM2  ADAFRUIT_USER "/feeds/temperatura2"
//#define ADAFRUIT_FEED_GAS  ADAFRUIT_USER "/feeds/gas"
// Suscripci√≥n
#define ADAFRUIT_DATA_IN   ADAFRUIT_USER "/feeds/data_in"
Servo servo1;
Servo servo2;


// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

int state = 0; // 0 off, 1 on
int state2 = 0;
int state3 = 0; // 0 off, 1 on
int state4 = 0;
int state5= 0;
int state6=0;
//#define SENSOR_PIN 35 
#define DHTPIN1    4
#define DHTPIN2    5
#define DHTTYPE DHT11 
DHT dht1(DHTPIN1, DHTTYPE);
DHT dht2(DHTPIN2, DHTTYPE);
float ValHum1, ValTem1 = 0;
float ValHum2, ValTem2 = 0;
int led1=12;//pin led
int led2=13; //pin buzzer
int led3=19;//pin led
int led4=14; //pin buzzer
//Servo
int pinServo1=18;
int pinServo2=21;
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;

//*****
//* DECLARACION FUNCIONES *
//*****
void setup_wifi();
void callback(char* topic, byte* payload, unsigned int length);
void reconnect();
void mqtt_publish(String feed, float val);
void get_MQTT_ID();

void setup() {
  Serial.begin(115200);
  delay(10);
  pinMode(led1,OUTPUT);
   pinMode(led2,OUTPUT);
   pinMode(led3,OUTPUT);
   pinMode(led4,OUTPUT);
  servo1.attach(pinServo1, 500, 2500);
  servo2.attach(pinServo2, 500, 2500);
   Wire.begin(21, 22);
  get_MQTT_ID();
    setup_wifi();
    client.setServer(ADAFRUIT_SERVER, ADAFRUIT_PORT);
    client.setCallback(callback);

    dht1.begin(); //Inicializa el sensor dht
    dht2.begin(); //Inicializa el sensor dht

     // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid,password );
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
   WiFiClient client = server.available(); // Listen for incoming clients

  if (client)
  { // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client."); // print a message out in the serial port
    String currentLine = "";       // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime)
    { // loop while the client's connected
      currentTime = millis();
      if (client.available())
      {                         // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c);        // print it out the serial monitor
        header += c;
        if (c == '\n')
        { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0)
          {
    // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
 // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            
            // turns the GPIOs on and off
            if (header.indexOf("GET /led1/on") >= 0)
            {
              state2 = 1;
              Serial.println("Led1 ON");
              LED1();
                       
            }
            else if (header.indexOf("GET /led1/off") >= 0)
            {
              state2 = 0;
              Serial.println("Led1 OFF");
              LED_Apagada1();
                       }

            if (header.indexOf("GET /led2/on") >= 0)
            {
              state4 = 1;
              Serial.println("Led2 ON");
              LED2();
                       
            }
            else if (header.indexOf("GET /led2/off") >= 0)
            {
              state4 = 0;
              Serial.println("Led2 OFF");
              LED_Apagada2();
                       }

            if (header.indexOf("GET /led3/on") >= 0)
            {
              state5 = 1;
              Serial.println("Led3 ON");
              LED3();
                       
            }
            else if (header.indexOf("GET /led3/off") >= 0)
            {
              state5 = 0;
              Serial.println("Led3 OFF");
              LED_Apagada3();
                       }
            if (header.indexOf("GET /led4/on") >= 0)
            {
              state6 = 1;
              Serial.println("Led4 ON");
              LED4();
                       
            }
            else if (header.indexOf("GET /led4/off") >= 0)
            {
              state6 = 0;
              Serial.println("Led4 OFF");
              LED_Apagada4();
                       }

            // turns the GPIOs on and off
            if (header.indexOf("GET /led/on") >= 0)
            {
              state = 1;
              Serial.println("Led ON");
              LED();
                       
            }
            else if (header.indexOf("GET /led/off") >= 0)
            {
              state = 0;
              Serial.println("Led OFF");
              LED_Apagada();
                       }
            if (header.indexOf("GET /buzzer/on") >= 0)
            {
              state3 = 1;
              Serial.println("Buzzer on");
              BUZZER();
                       
            }
            else if (header.indexOf("GET /buzzer/off") >= 0)
            {
              state3 = 0;
              Serial.println("Buzzer off");
              BUZZER_APAGADO();
                       }

            //Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
           

            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #3FFCB8; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #3FFCFB;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button3 { background-color: #3F57FC; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button4 {background-color: #E71BD5;}</style></head>");
             client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button5 { background-color: #3FFCB8; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button6 {background-color: #3FFCFB;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button7 { background-color: #3F57FC; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button8 {background-color: #E71BD5;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button9 { background-color: #ED7F12; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button10 {background-color: #8AF706;}</style></head>");

            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button11 { background-color: #06D2F7; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button12 {background-color: #D206F7;}</style></head>");
        
        
            // Web Page Heading
            client.println("<body><h1>Led & Buzzer</h1>");

            // Display current state, and ON/OFF buttons for GPIO 26
            // If the output26State is off, it displays the ON button
            if (state == 1)
            {
              client.println("<p>Led Encendida</p>");
              client.println("<p><a href=\"/led/off\"><button class=\"button button2\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led Apagada</p>");
              client.println("<p><a href=\"/led/on\"><button class=\"button\">ON</button></a></p>");
            
           
            
            }
            if (state3 == 1)
            {
              client.println("<p>Buzzer Encendido</p>");
              client.println("<p><a href=\"/buzzer/off\"><button class=\"button3 button4\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Buzzer Apagado</p>");
              client.println("<p><a href=\"/buzzer/on\"><button class=\"button3\">ON</button></a></p>");
            
           
            
            }
            if (state2 == 1)
            {
              client.println("<p>Led1 Encendida</p>");
              client.println("<p><a href=\"/led1/off\"><button class=\"button5 button6\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led1 Apagada</p>");
              client.println("<p><a href=\"/led1/on\"><button class=\"button5\">ON</button></a></p>");
            
           
            
            }
            if (state4 == 1)
            {
              client.println("<p>Led2 Encendida</p>");
              client.println("<p><a href=\"/led2/off\"><button class=\"button7 button8\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led2 Apagada</p>");
              client.println("<p><a href=\"/led2/on\"><button class=\"button7\">ON</button></a></p>");
            
           
            
            }
            if (state5 == 1)
            {
              client.println("<p>Led3 Encendida</p>");
              client.println("<p><a href=\"/led3/off\"><button class=\"button9 button10\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led3 Apagada</p>");
              client.println("<p><a href=\"/led3/on\"><button class=\"button9\">ON</button></a></p>");
            
           
            
            }
            if (state6 == 1)
            {
              client.println("<p>Led4 encendido</p>");
              client.println("<p><a href=\"/led4/off\"><button class=\"button11 button12\">OFF</button></a></p>");
              
              
            
            }
            else
            {
              client.println("<p>Led4 encendido</p>");
              client.println("<p><a href=\"/led4/on\"><button class=\"button11\">ON</button></a></p>");
            
           
            
            }

            client.println("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          }
          else
          { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        }
        else if (c != '\r')
        {                   // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
  if (!client.connected()) 
    {
      reconnect();
     }

    client.stop();
    
    long now = millis();

    if (now - lastMsg > 6500)
    {
      lastMsg = now;

      //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      ValHum1 = dht1.readHumidity();
      ValTem1 = dht1.readTemperature();

      ValHum2 = dht2.readHumidity();
      ValTem2 = dht2.readTemperature();
      //int valor = analogRead(SENSOR_PIN);  // Lee el valor del sensor
  //Serial.println(valor);  // Imprime el valor en el monitor serial

      
                
      if (isnan(ValHum1) || isnan(ValTem1) || isnan(ValHum2) || isnan(ValTem2) ) {
          ValHum1 = 0;
          ValTem1 = 0;
          ValHum2 = 0;
          ValTem2 = 0;
        
          Serial.println(F("Error de lectura del sensor DHT11!"));
      }
              
      Serial.println((String) "Humedad1: " + ValHum1 + "%  Temperatura1: " + ValTem1 + " Humedad2: " + ValHum2 + "%  Temperatura2: " + ValTem2 );
      // Publicar
       mqtt_publish(ADAFRUIT_FEED_HUM1, ValHum1);
       mqtt_publish(ADAFRUIT_FEED_TEM1, ValTem1);
       mqtt_publish(ADAFRUIT_FEED_HUM2, ValHum2);
       mqtt_publish(ADAFRUIT_FEED_TEM2, ValTem2);
        //mqtt_publish(ADAFRUIT_FEED_GAS, valor);
       
    }

} 
 


void LED(){
    servo1.write(0);
}

void LED_Apagada(){
  servo1.write(90);
}
void BUZZER(){
  servo2.write(0);
}
void BUZZER_APAGADO(){
  servo2.write(90);
}
void LED1(){
 digitalWrite(led1,HIGH);
}

void LED_Apagada1(){
  digitalWrite(led1,LOW);
}
void LED2(){
 digitalWrite(led2,HIGH);
}

void LED_Apagada2(){
  digitalWrite(led2,LOW);
}
void LED3(){
 digitalWrite(led3,HIGH);
}

void LED_Apagada3(){
  digitalWrite(led3,LOW);
}
void LED4(){
 digitalWrite(led4,HIGH);
}

void LED_Apagada4(){
  digitalWrite(led4,LOW);
}
void mqtt_publish(String feed, float val){
    String value = String(val);
    if(client.connected()){
        client.publish(feed.c_str(), value.c_str());
        Serial.println("Publicando al t√≥pico: " + String(feed) + " | mensaje: " + value);        
    }     
    }
    void setup_wifi()
{
    delay(10);
    
    // Nos conectamos a nuestra red Wifi
    Serial.println();
    Serial.print("Conectando a ");
    Serial.println(String(WIFI_SSID));

    //Serial.println(ssid);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }

    Serial.println("");
    Serial.println("Conectado a red WiFi!");
    Serial.println("Direcci√≥n IP: ");
    Serial.println(WiFi.localIP());
}

// Funci√≥n para capturar data por MQTT
void callback(char *topic, byte *payload, unsigned int length)
{
    String mensaje  = "";
    String str_topic(topic); 

    for (uint16_t i = 0; i < length; i++){
        mensaje += (char)payload[i];
    }

    mensaje.trim();

    Serial.println("T√≥pico: " + str_topic);
    Serial.println("Mensaje: " + mensaje); 
}

// Capturar el ChipID para Id de MQTT
void get_MQTT_ID(){
    uint64_t chipid = ESP.getEfuseMac();    
    snprintf(ADAFRUIT_ID, sizeof(ADAFRUIT_ID),"%llu", chipid );
}

void reconnect() 
{
    while (!client.connected()) 
    {   
        if(client.connect(ADAFRUIT_ID, ADAFRUIT_USER, ADAFRUIT_KEY))
        {
           Serial.println("MQTT conectado!");
            client.subscribe(ADAFRUIT_DATA_IN);
            Serial.println("Suscrito al t√≥pico: " + String(ADAFRUIT_DATA_IN));
       
          } else {
            Serial.print("fall√≥ :( con error -> ");
            Serial.print(client.state());
            Serial.println(" Intentamos de nuevo en 5 segundos");
            delay(5000);
          }
      }
}
